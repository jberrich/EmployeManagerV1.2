/*
 * Created on 20 nov. 2017 ( Time 23:22:58 )
 * Generated by Telosys Tools Generator ( version 2.1.1 )
 */
package ma.jberrich.dao.impl.jdbc;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.List;

import ma.jberrich.bean.Dept;
import ma.jberrich.dao.DeptDAO;
import ma.jberrich.dao.impl.jdbc.commons.GenericDAO;

/**
 * Dept DAO implementation 
 * 
 * @author Telosys Tools
 *
 */
public class DeptDAOImpl extends GenericDAO<Dept> implements DeptDAO {

	private final static String SQL_SELECT = 
		"select DEPTNO, DNAME, LOC from dept where DEPTNO = ?";

	private final static String SQL_INSERT = 
		"insert into dept ( DEPTNO, DNAME, LOC ) values ( ?, ?, ? )";

	private final static String SQL_UPDATE = 
		"update dept set DNAME = ?, LOC = ? where DEPTNO = ?";

	private final static String SQL_DELETE = 
		"delete from dept where DEPTNO = ?";

	private final static String SQL_COUNT_ALL = 
		"select count(*) from dept";

	private final static String SQL_COUNT = 
		"select count(*) from dept where DEPTNO = ?";

    //----------------------------------------------------------------------
	/**
	 * DAO constructor
	 */
	public DeptDAOImpl() {
		super();
	}

	//----------------------------------------------------------------------
	/**
	 * Creates a new instance of the bean and populates it with the given primary value(s)
	 * @param deptno;
	 * @return the new instance
	 */
	private Dept newInstanceWithPrimaryKey( int deptno ) {
		Dept dept = new Dept();
		dept.setDeptno( deptno );
		return dept ;
	}
	
	/**
	 * findAll added by JBERRICH
	 * @return
	 */
	@Override
	public List<Dept> findAll() {
		List<Dept> services = new ArrayList<>();
		Connection conn = null;
		try {
			conn = getConnection();
			ResultSet rs = conn.createStatement().executeQuery("SELECT DEPTNO FROM DEPT");
			while (rs.next()) {
				services.add(find(rs.getInt(1)));
			}
			rs.close();
		}  catch (SQLException e) {
			throw new RuntimeException(e);
		} finally {
			closeConnection(conn);
		}
		return services;
	}

	@Override
	public Dept findByName(String name) {
		Dept dept = null;
		Connection conn = null;
		try {
			conn = getConnection();
			PreparedStatement ps = conn.prepareStatement("SELECT DEPTNO FROM DEPT WHERE DNAME = ?");
			setValue(ps, 1, name);
			ResultSet rs = ps.executeQuery();
			int id = 0;
			while (rs.next()) {
				id = rs.getInt(1);
			}
			dept = find(id);
			rs.close();
			ps.close();
		}  catch (SQLException e) {
			throw new RuntimeException(e);
		} finally {
			closeConnection(conn);
		}
		return dept;
	}
	
	//----------------------------------------------------------------------
	/**
	 * Finds a bean by its primary key 
	 * @param deptno;
	 * @return the bean found or null if not found 
	 */
	@Override
	public Dept find( int deptno ) {
		Dept dept = newInstanceWithPrimaryKey( deptno ) ;
		if ( super.doSelect(dept) ) {
			return dept ;
		}
		else {
			return null ; // Not found
		}
	}
	//----------------------------------------------------------------------
	/**
	 * Loads the given bean, it is supposed to contains the primary key value(s) in its attribute(s)<br>
	 * If found, the given instance is populated with the values retrieved from the database<br>
	 * If not found, the given instance remains unchanged
	 * @param dept
	 * @return true if found, false if not found
	 */
	@Override
	public boolean load( Dept dept ) {
		return super.doSelect(dept) ;
	}
    //----------------------------------------------------------------------
	/**
	 * Inserts the given bean in the database 
	 * @param dept
	 */
	@Override
	public void insert(Dept dept) {
		super.doInsert(dept);
	}	

    //----------------------------------------------------------------------
	/**
	 * Updates the given bean in the database 
	 * @param dept
	 * @return
	 */
	@Override
	public int update(Dept dept) {
		return super.doUpdate(dept);
	}	

    //----------------------------------------------------------------------
	/**
	 * Deletes the record in the database using the given primary key value(s) 
	 * @param deptno;
	 * @return
	 */
	@Override
	public int delete( int deptno ) {
		Dept dept = newInstanceWithPrimaryKey( deptno ) ;
		return super.doDelete(dept);
	}

    //----------------------------------------------------------------------
	/**
	 * Deletes the given bean in the database 
	 * @param dept
	 * @return
	 */
	@Override
	public int delete( Dept dept ) {
		return super.doDelete(dept);
	}

    //----------------------------------------------------------------------
	/**
	 * Checks the existence of a record in the database using the given primary key value(s)
	 * @param deptno;
	 * @return
	 */
	@Override
	public boolean exists( int deptno ) {
		Dept dept = newInstanceWithPrimaryKey( deptno ) ;
		return super.doExists(dept);
	}
    //----------------------------------------------------------------------
	/**
	 * Checks the existence of the given bean in the database 
	 * @param dept
	 * @return
	 */
	@Override
	public boolean exists( Dept dept ) {
		return super.doExists(dept);
	}

    //----------------------------------------------------------------------
	/**
	 * Counts all the records present in the database
	 * @return
	 */
	@Override
	public long count() {
		return super.doCountAll();
	}

    //----------------------------------------------------------------------
	@Override
	protected String getSqlSelect() {
		return SQL_SELECT ;
	}
    //----------------------------------------------------------------------
	@Override
	protected String getSqlInsert() {
		return SQL_INSERT ;
	}
    //----------------------------------------------------------------------
	@Override
	protected String getSqlUpdate() {
		return SQL_UPDATE ;
	}
    //----------------------------------------------------------------------
	@Override
	protected String getSqlDelete() {
		return SQL_DELETE ;
	}
    //----------------------------------------------------------------------
	@Override
	protected String getSqlCount() {
		return SQL_COUNT ;
	}
    //----------------------------------------------------------------------
	@Override
	protected String getSqlCountAll() {
		return SQL_COUNT_ALL ;
	}

    //----------------------------------------------------------------------
	@Override
	protected void setValuesForPrimaryKey(PreparedStatement ps, int i, Dept dept) throws SQLException {
		//--- Set PRIMARY KEY from bean to PreparedStatement ( SQL "WHERE key=?, ..." )
		setValue(ps, i++, dept.getDeptno() ) ; // "DEPTNO" : int
	}

    //----------------------------------------------------------------------
	@Override
	protected Dept populateBean(ResultSet rs, Dept dept) throws SQLException {

		//--- Set data from ResultSet to Bean attributes
		dept.setDeptno(rs.getInt("DEPTNO")); // int
		dept.setDname(rs.getString("DNAME")); // java.lang.String
		dept.setLoc(rs.getString("LOC")); // java.lang.String
		return dept ;
	}

    //----------------------------------------------------------------------
	@Override
	protected void setValuesForInsert(PreparedStatement ps, int i, Dept dept) throws SQLException {

		//--- Set PRIMARY KEY and DATA from bean to PreparedStatement ( SQL "SET x=?, y=?, ..." )
		setValue(ps, i++, dept.getDeptno() ) ; // "DEPTNO" : int
		setValue(ps, i++, dept.getDname() ) ; // "DNAME" : java.lang.String
		setValue(ps, i++, dept.getLoc() ) ; // "LOC" : java.lang.String
	}

    //----------------------------------------------------------------------
	@Override
	protected void setValuesForUpdate(PreparedStatement ps, int i, Dept dept) throws SQLException {

		//--- Set DATA from bean to PreparedStatement ( SQL "SET x=?, y=?, ..." )
		setValue(ps, i++, dept.getDname() ) ; // "DNAME" : java.lang.String
		setValue(ps, i++, dept.getLoc() ) ; // "LOC" : java.lang.String
		//--- Set PRIMARY KEY from bean to PreparedStatement ( SQL "WHERE key=?, ..." )
		setValue(ps, i++, dept.getDeptno() ) ; // "DEPTNO" : int
	}

}
