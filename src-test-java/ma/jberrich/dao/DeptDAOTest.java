/*
 * Created on 20 nov. 2017 ( Time 23:22:58 )
 * Generated by Telosys Tools Generator ( version 2.1.1 )
 */
package ma.jberrich.dao;

import java.sql.SQLException;

import ma.jberrich.dao.commons.DAOProvider;
import ma.jberrich.dao.commons.DAOTestUtil;
import org.junit.Assert;
import org.junit.BeforeClass;
import org.junit.Test;

import ma.jberrich.bean.Dept;

/**
 * JUnit tests for DeptDAO
 * 
 * @author Telosys Tools
 *
 */
public class DeptDAOTest {


	private static final String CREATE_TABLE = 
			 "CREATE TABLE dept ("
			+ "DEPTNO INTEGER NOT NULL,"
			+ "DNAME VARCHAR(14) ,"
			+ "LOC VARCHAR(13) ,"
			+ "PRIMARY KEY(DEPTNO)"
			+ ");"
			;

	@BeforeClass
	public static void init() {
		DAOTestUtil.initDatabase(CREATE_TABLE) ;
	}

	@Test
	public void testDAO() throws SQLException {
    	System.out.println("test DeptDAO ");
    	DeptDAO dao = DAOProvider.getDAO(DeptDAO.class);

    	Assert.assertTrue( dao.count() == 0 );

    	Dept dept = new Dept();
		//--- Key values
		dept.setDeptno(100); // "DEPTNO" : int
		//--- Other values
		dept.setDname("AAAAAAAAAAAAAA"); // "DNAME" : java.lang.String
		dept.setLoc("AAAAAAAAAAAAA"); // "LOC" : java.lang.String

    	//--- INSERT
    	System.out.println("Insert : " + dept );
    	dao.insert(dept);
    	Assert.assertTrue( dao.exists(100) );
    	Assert.assertTrue( dao.count() == 1 );
    	Assert.assertTrue( dao.exists(dept) );
    	
    	//--- FIND
    	System.out.println("Find..." );
    	Dept dept2 = dao.find(100);
    	Assert.assertNotNull(dept2);
		Assert.assertTrue( dept2.getDeptno() == 100  ) ;
    	Assert.assertTrue( dao.exists(dept2) ) ;
    	
    	//--- UPDATE
		//--- Change values
		dept2.setDname("BBBBBBBBBBBBBB"); // "DNAME" : java.lang.String
		dept2.setLoc("BBBBBBBBBBBBB"); // "LOC" : java.lang.String
    	System.out.println("Update : " + dept2 );
    	Assert.assertTrue( dao.update(dept2) == 1 );
    	
    	//--- LOAD
    	Dept dept3 = new Dept();
    	dept3.setDeptno(100);
    	Assert.assertTrue( dao.load(dept3) );
    	System.out.println("Loaded : " + dept3 );
		Assert.assertEquals(dept2.getDname(), dept3.getDname() ); 
		Assert.assertEquals(dept2.getLoc(), dept3.getLoc() ); 


    	dept3.setDeptno(300);
    	Assert.assertFalse( dao.load(dept3) );
    	
    	//--- DELETE
    	System.out.println("Delete : " + dept2 );
    	Assert.assertTrue( dao.delete(dept2) == 1 );
    	Assert.assertTrue( dao.delete(dept2) == 0 );
    	Assert.assertTrue( dao.delete(100) == 0 );

    	Assert.assertTrue( dao.count() == 0 );
    	Assert.assertFalse( dao.exists(100) ) ;
    	Assert.assertFalse( dao.exists(dept2) ) ;
    	dept2 = dao.find(100);
    	Assert.assertNull( dept2 );
    	
    	System.out.println("Normal end of DAO test." );
	}

}
