/*
 * Created on 20 nov. 2017 ( Time 23:22:58 )
 * Generated by Telosys Tools Generator ( version 2.1.1 )
 */
package ma.jberrich.dao;

import java.sql.SQLException;

import ma.jberrich.dao.commons.DAOProvider;
import ma.jberrich.dao.commons.DAOTestUtil;
import org.junit.Assert;
import org.junit.BeforeClass;
import org.junit.Test;

import ma.jberrich.bean.Emp;

/**
 * JUnit tests for EmpDAO
 * 
 * @author Telosys Tools
 *
 */
public class EmpDAOTest {


	private static final String CREATE_TABLE = 
			 "CREATE TABLE emp ("
			+ "EMPNO IDENTITY AUTO_INCREMENT NOT NULL,"
			+ "ENAME VARCHAR(64) ,"
			+ "JOB VARCHAR(9) ,"
			+ "AGE INTEGER ,"
			+ "SAL DECIMAL ,"
			+ "DEPTNO INTEGER ,"
			+ "PRIMARY KEY(EMPNO)"
			+ ");"
			;

	@BeforeClass
	public static void init() {
		DAOTestUtil.initDatabase(CREATE_TABLE) ;
	}

	@Test
	public void testDAO() throws SQLException {
    	System.out.println("test EmpDAO ");
    	EmpDAO dao = DAOProvider.getDAO(EmpDAO.class);

    	Assert.assertTrue( dao.count() == 0 );

    	Emp emp = new Emp();
		//--- Key values
		// Auto-incremented key : nothing to set in the Primary Key
		//--- Other values
		emp.setEname("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA"); // "ENAME" : java.lang.String
		emp.setJob("AAAAAAAAA"); // "JOB" : java.lang.String
		emp.setAge(100); // "AGE" : int
		emp.setSal(100); // "SAL" : int
		emp.setDeptno(100); // "DEPTNO" : int

    	//--- INSERT
    	System.out.println("Insert : " + emp );
    	int pkAutoIncr = dao.insert(emp);
    	emp.setEmpno( pkAutoIncr );
    	Assert.assertTrue( dao.exists(pkAutoIncr) );
    	Assert.assertTrue( dao.count() == 1 );
    	Assert.assertTrue( dao.exists(emp) );
    	
    	//--- FIND
    	System.out.println("Find..." );
    	Emp emp2 = dao.find(pkAutoIncr);
    	Assert.assertNotNull(emp2);
    	Assert.assertTrue( dao.exists(emp2) ) ;
    	
    	//--- UPDATE
		//--- Change values
		emp2.setEname("BBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB"); // "ENAME" : java.lang.String
		emp2.setJob("BBBBBBBBB"); // "JOB" : java.lang.String
		emp2.setAge(200); // "AGE" : int
		emp2.setSal(200); // "SAL" : int
		emp2.setDeptno(200); // "DEPTNO" : int
    	System.out.println("Update : " + emp2 );
    	Assert.assertTrue( dao.update(emp2) == 1 );
    	
    	//--- LOAD
    	Emp emp3 = new Emp();
    	emp3.setEmpno( pkAutoIncr );
    	Assert.assertTrue( dao.load(emp3) );
    	System.out.println("Loaded : " + emp3 );
		Assert.assertEquals(emp2.getEname(), emp3.getEname() ); 
		Assert.assertEquals(emp2.getJob(), emp3.getJob() ); 
		Assert.assertEquals(emp2.getAge(), emp3.getAge() ); 
		Assert.assertEquals(emp2.getSal(), emp3.getSal() ); 
		Assert.assertEquals(emp2.getDeptno(), emp3.getDeptno() ); 


    	emp3.setEmpno(300);
    	Assert.assertFalse( dao.load(emp3) );
    	
    	//--- DELETE
    	System.out.println("Delete : " + emp2 );
    	Assert.assertTrue( dao.delete(emp2) == 1 );
    	Assert.assertTrue( dao.delete(emp2) == 0 );
    	Assert.assertTrue( dao.delete(100) == 0 );

    	Assert.assertTrue( dao.count() == 0 );
    	Assert.assertFalse( dao.exists(100) ) ;
    	Assert.assertFalse( dao.exists(emp2) ) ;
    	emp2 = dao.find(100);
    	Assert.assertNull( emp2 );
    	
    	System.out.println("Normal end of DAO test." );
	}

}
